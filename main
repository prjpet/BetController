#USER VARIABLES
betOptions = "unkown"   #
EndTime = "45"      #Last minute that is permiteted to bet
StartTime = "10"    #First minute that is permited to bet
MinValOdd = "1.2"   #Minimum value for the odd that is permited to bet
minDelay = 4          #Minumum time delay in seconds
MaxDelay = 10         #Maximum time delay in seconds
START_OFFSET = 225



from LoadBrowser import LoadBrowser
from Game import Game
import random, time, pyautogui

import io




# When fail-safe mode is True, moving the mouse to the upper-left will raise a pyautogui.FailSafeException that can abort your program:
pyautogui.FAILSAFE = True
a = random.uniform(minDelay, MaxDelay)  # example of Random time delay

def loadData(item):




    splitText = item.text.split("\n")
    if len(splitText) >= 4:
        Team1 = splitText[0]
        Team2 = splitText[1]
        Score = splitText[2]
        GameTime = splitText[3]
#only for security of not BREAKING the coce use the following : - ONLY FOR P :D
    else:
        Team1 = "NONE"
        Team2 = "NONE"
        Score = "NONE"
        GameTime = "NONE"
    global Odd05
    Odd05 = "NONE"

    global OverGoals
    OverGoals = "NONE"

    global Winner
    Winner = False

    global Bet_ON
    Bet_ON = False


    FHG_list = []

    # LOOK FOR FIRST HALF GOALS
    SEARCH_STRING1 = "First Half Goals"
    SEARCH_STRING2 = "Over"
    # LoadBrowser.locateElementByAndLoad("//div[@class='fc-day-content' and text()='15']")
    # buto_test=LoadBrowser.locateElementsByClassAndLoad("gl-MarketGroupButton_Text") - working
    buto_test = LoadBrowser.locateElementsByClassAndLoad("gl-MarketGroup")
    for i, item in enumerate(buto_test):
        # print(i,": " + item.text)

        if item.text.find(SEARCH_STRING1) != -1:  # "First Half Goals": - WORKING
            FHG_list = item.text.split("\n")
            # check if Over value is a float value- error in case that odds are blocked/modified
            if FHG_list[FHG_list.index(SEARCH_STRING2) + 1] != "Under":
                Odd05 = FHG_list[FHG_list.index(SEARCH_STRING2) + 1]
                OverGoals = (FHG_list[1])


    # Validate for bet_on
    if Score == "0-0" and  StartTime < GameTime[:2] and EndTime > GameTime[:2] and OverGoals == " 0.5" and MinValOdd < Odd05 :
        Winner = False
        Bet_ON = True

    #elif Score != "0-0" and Bet_ON==True:
        #Winner = True

    # element_list with: CURRENT TIME.....TEAM 1.....TEAM 2.....SCORE.....TIME OF THE GAME.....OVER GOALS....ODD OVER.....BET ON.....WINNER

    element_list = [Team1, Team2, Score, GameTime, OverGoals, Odd05, str(Bet_ON), str(Winner)]
    print(element_list)



def clickThroughValidItems(originalGames, old_moveToY):
    # - THIS LOADS ALL GAMES ON PAGE WITH SCORES AND CURRENT TIME ans score

    itemCounter = 0

    # ASSUMPTION: LIST IS VALID
    while len(originalGames) > itemCounter+1 and len(originalGames[itemCounter].text.split("\n")[2])==3 and originalGames == LoadBrowser.locateElementsByClassAndLoad("ipn-FixtureButton "):
        # MOVE TO CORRECT POSITION:
        if originalGames == LoadBrowser.locateElementsByClassAndLoad("ipn-FixtureButton "):
            moveToX = originalGames[itemCounter].location_once_scrolled_into_view['x'] + pyautogui.size()[0]/2+ 100 #int(originalGames[itemCounter].size["width"]/2)
        else:
            break
        if originalGames == LoadBrowser.locateElementsByClassAndLoad("ipn-FixtureButton "):
            moveToY = originalGames[itemCounter].location_once_scrolled_into_view['y'] + 120 # int(originalGames[itemCounter].size["height"])
        else:
            break
        #pyautogui.alert(text=originalGames[itemCounter].size["height"], title='', button='OK')
        #move cursor to begining of the list
        if itemCounter == 0: pyautogui.moveTo(moveToX, moveToY, duration=0.5)

        # CLICK:
        pyautogui.click(button='left')

        # LOAD DATA:
        loadData(originalGames[itemCounter])

        itemCounter += 1


    clickThroughValidItems(LoadBrowser.locateElementsByClassAndLoad("ipn-FixtureButton "), START_OFFSET)



if __name__ == "__main__":

    LoadBrowser = LoadBrowser()

    #1. PREPARE WEBSITE:
    # - Click through the correct links until on the correct page (Overview - Soccer)
    # missing: delay between interaction
    LoadBrowser.locateElementByTextAndClick("English")
    LoadBrowser.locateElementByTextAndClick("In-Play")
    LoadBrowser.DRIVER.find_elements_by_class_name("hm-DropDownSelections_Highlight ")[1].click()
    LoadBrowser.locateElementByTextAndClick("Decimal")

    #2. LOGIN

    #LoadOdds.locateUsernameAndPassword("input.hm-Login_InputField", "username","password")
    #LoadOdds.locateElementByCssAndClick("button.hm-Login_LoginBtn")

    #3. CLICK "Event View"
    LoadBrowser.locateElementByXpathAndClick("//span/div[2]")

    # 4. LOAD GAME DATA:
    # missing: score, betOptions, nameOfOdds, odds
    #teamList = LoadBrowser.locateElementsByClassAndLoad("ipn-TeamStack_Team")
    #timeList = LoadBrowser.locateElementsByClassAndLoad("ipn-ScoreDisplayStandard_Timer")
    #scoreList= LoadBrowser.locateElementsByClassAndLoad("ipn-ScoreDisplayStandard_Score")

    #CHANGE: 03/06/2017 - RENAMED "buttons" to "originalGames"
    originalGames = LoadBrowser.locateElementsByClassAndLoad("ipn-FixtureButton ")

    #pyautogui.hotkey('alt', 'space')
    #pyautogui.hotkey('x')
    pyautogui.hotkey('win', 'right')



    clickThroughValidItems(originalGames, START_OFFSET)

"""
User Variables:
betOptions, EndTime, StartTime, MinValOdd, minDelay, MaxDelay

Game properties:
BetTRUE, Team1, team2, time, score, betOptions, (nameOfOdds, odds)

-1. DEFINE selected bet options - get proper string name into variable
0-load ALL GAMES
1-first game - Team1, team2, time, score, betOptions, (nameOfOdds, odds)
2 if score is different from 0:0 OR
    time is not in interval StartTime, EndTime OR
    the betOptions (1st half score or 2nd half score) doesn't exist THEN 
    click on next game 
3 else read the (nameOfOdds, odds) value for bet option
4.if odds values are bigger then MinValOdd(1.41) AND
BetTRUE=FALSE
then  BetTRUE - output the game + minute + score + odds value into a txt file

if score is different from 0:0 AND
betOptions is == 2nd half score AND
odds values are bigger then MinValOdd AND
betTRUE ==FALSE
then  BetTRUE - output the game + minute + score + odds value into a txt file

-UPDATE GAME LIST (what is the update frequency???)
-TRY TO ADD FINAL SCORE 

ADD ramdom delays in seconds between actions (minDelay and MaxDelay)
"""