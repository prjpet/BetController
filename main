# USER VARIABLES

# First HALF XxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXx
StartTime1 = "10"  # First minute that is permited to bet on FIRST half
EndTime1 = "45"  # Last minute that is permiteted to bet on FIRST half
MinValOdd1 = "1.2"  # Minimum value for the odd that is permited to bet on FIRST half

# Second HALF XxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXx
StartTime2 = "48"  # First minute that is permited to bet on SECOND half
EndTime2 = "85"  # Last minute that is permiteted to bet on SECOND half
MinValOdd2 = "1.2"  # Minimum value for the odd that is permited to bet on SECOND half

minDelay = 4  # Minumum time delay in seconds
MaxDelay = 10  # Maximum time delay in seconds
START_OFFSET = 225

from LoadBrowser import LoadBrowser
import random, time, pyautogui, gc

# When fail-safe mode is True, moving the mouse to the upper-left will raise a pyautogui.FailSafeException that can abort your program:
pyautogui.FAILSAFE = True
a = random.uniform(minDelay, MaxDelay)  # example of Random time delay


# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

def loadOddData(item1, current_i, max_i):
    """

    :param item1: 
    :param current_i: 
    :param max_i: 
    """
    print("1")
    splitText = item1.text.split("\n")
    print("2")
    if len(splitText) >= 4:
        print("3")
        Team1 = splitText[0]
        Team2 = splitText[1]
        Score = splitText[2]
        GameTime = splitText[3]
        # print("splitText")
    # only for security of not BREAKING the coce use the following : - ONLY FOR     P.R.J.
    else:
        print("4")
        Team1 = "NONE"
        Team2 = "NONE"
        Score = "NONE"
        GameTime = "NONE"

    global Odd05
    global OverGoals
    global Winner
    global Bet_ON

    Odd05 = "NONE"
    OverGoals = "NONE"
    Winner = False
    Bet_ON = False

    # LOOK FOR FIRST HALF GOALS
    SEARCH_STRING1 = "First Half Goals"
    SEARCH_STRING2 = "Over"
    SEARCH_STRING3 = "Match Goals"

    # MARKET_GROUP is the full list of odds
    ListOfOdds = LoadBrowser.locateElementsByClassAndLoad("gl-MarketGroup")
    print("5")
    try:
        for i, item in enumerate(ListOfOdds):
            print("6")
            # print(i,": " + item.text)
            if ListOfOdds == LoadBrowser.locateElementsByClassAndLoad(
                    "gl-MarketGroup"):  # if the list has been changed, then reload
                print("7")  # ERROR HERE
                if (item.text.find(SEARCH_STRING1) != -1) or (
                            item.text.find(SEARCH_STRING3) != -1):  # and  - WORKING
                    print("8")
                    FHG_list = item.text.split("\n")
                    print("9")
                    # check if Over value is a float value- error in case that odds are blocked/modified
                    if FHG_list[FHG_list.index(SEARCH_STRING2) + 1] != "Under":
                        print("10")
                        Odd05 = FHG_list[FHG_list.index(SEARCH_STRING2) + 1]
                        OverGoals = (FHG_list[1])
                        break
            else:
                print("ERROR 62")
                time.sleep(10)
                break

    except ValueError:
        print("ERROR 11")

    # Validate for bet_on for FIRST HALF
    if Score == "0-0" and StartTime1 < GameTime[:2] < EndTime1 and OverGoals == " 0.5" and MinValOdd1 < Odd05:
        print("11")
        Winner = False
        Bet_ON = True
    # Validate for bet_on for SECOND HALF
    if Score == "0-0" and StartTime2 < GameTime[:2] < EndTime2 and OverGoals == " 0.5" and MinValOdd2 < Odd05:
        print("12")
        Winner = False
        Bet_ON = True

        # elif Score != "0-0" and Bet_ON==True:
        # Winner = True
    BotTime = ((time.time() - StartProgramTime) / 60)
    print("13")
    # element_list with: CURRENT TIME.....TEAM 1.....TEAM 2.....SCORE.....TIME OF THE GAME.....OVER GOALS....ODD OVER.....BET ON.....WINNER


    element_list = ["%.2f" % BotTime, current_i, "out of", max_i, Team1, Team2, Score, GameTime, OverGoals, Odd05,
                    str(Bet_ON), str(Winner)]
    print("14")
    print(element_list)
    gc.collect() #garbage collect- clear memory

# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX



if __name__ == "__main__":

    LoadBrowser = LoadBrowser()


    # 1. PREPARE WEBSITE:
    # - Click through the correct links until on the correct page (Overview - Soccer)
    # missing: delay between interaction
    LoadBrowser.locateElementByTextAndClick("English")
    LoadBrowser.locateElementByTextAndClick("In-Play")
    LoadBrowser.DRIVER.find_elements_by_class_name("hm-DropDownSelections_Highlight ")[1].click()
    LoadBrowser.locateElementByTextAndClick("Decimal")

    # 2. LOGIN

    # LoadOdds.locateUsernameAndPassword("input.hm-Login_InputField", "username","password")
    # LoadOdds.locateElementByCssAndClick("button.hm-Login_LoginBtn")

    # 3. CLICK "Event View"
    LoadBrowser.locateElementByXpathAndClick("//span/div[2]")

    # 4. LOAD GAME DATA:
    # missing: score, betOptions, nameOfOdds, odds
    # teamList = LoadBrowser.locateElementsByClassAndLoad("ipn-TeamStack_Team")
    # timeList = LoadBrowser.locateElementsByClassAndLoad("ipn-ScoreDisplayStandard_Timer")
    # scoreList= LoadBrowser.locateElementsByClassAndLoad("ipn-ScoreDisplayStandard_Score")

    # pyautogui.hotkey('alt', 'space')
    # pyautogui.hotkey('x')
    pyautogui.hotkey('win', 'right')
    # used for debugging purpose
    StartProgramTime = time.time()









    while True:
        originalGames = LoadBrowser.locateElementsByClassAndLoad("ipn-FixtureButton ")
        if originalGames != "":
            print(22)
            global Restart
            Restart=True
            while Restart==True:
                print(15 + 2)
                itemCounter = 0


                try:
                    # ASSUMPTION: LIST IS VALID Counter is not exceed and Sore lenght is 3 (as a normal football game) and lists haven't changed
                    while len(originalGames) > itemCounter + 1 and\
                            len(originalGames[itemCounter].text.split("\n")) >= 3 and\
                            len(originalGames[itemCounter].text.split("\n")[2]) == 3 and\
                            originalGames == LoadBrowser.locateElementsByClassAndLoad("ipn-FixtureButton "):
                        # MOVE TO CORRECT POSITION:
                        print("16")
                        if originalGames == LoadBrowser.locateElementsByClassAndLoad("ipn-FixtureButton "):
                            print("17")
                            moveToX = originalGames[itemCounter].location_once_scrolled_into_view['x'] + \
                                      pyautogui.size()[
                                          0] / 2 + 100  # int(originalGames[itemCounter].size["width"]/2)
                        else:
                            print("break on x")
                            break
                        if originalGames == LoadBrowser.locateElementsByClassAndLoad("ipn-FixtureButton "):
                            print("18")
                            moveToY = originalGames[itemCounter].location_once_scrolled_into_view[
                                          'y'] + 120  # int(originalGames[itemCounter].size["height"])
                        else:
                            print("break on y")
                            break

                        # pyautogui.alert(text=originalGames[itemCounter].size["height"], title='', button='OK')
                        # move cursor to begining of the list
                        if itemCounter == 0: pyautogui.moveTo(moveToX, moveToY, duration=0.5)

                        # CLICK:
                        pyautogui.click(button='left')
                        print("19")

                        # LOAD DATA:
                        loadOddData(originalGames[itemCounter], itemCounter, len(originalGames))
                        print("20")

                        itemCounter += 1
                    try:
                        print("While loop restarted      ", " ItemCounter:", len(originalGames) > itemCounter + 1,
                          " Score format:",
                          len(originalGames[itemCounter].text.split("\n")[2]) == 3, " Equal Lists:",
                          originalGames == LoadBrowser.locateElementsByClassAndLoad("ipn-FixtureButton "))
                    except:
                        print("While loop restarted      ")
                        pass
                    break
                except:
                    print("While loop encounted some error, loop restarted")
                    pass
                # clickThroughValidItems(LoadBrowser.locateElementsByClassAndLoad("ipn-FixtureButton "))

    else:
        print("GameList is null")
























        # XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

"""
User Variables:
betOptions, EndTime, StartTime, MinValOdd, minDelay, MaxDelay

Game properties:
BetTRUE, Team1, team2, time, score, betOptions, (nameOfOdds, odds)

-1. DEFINE selected bet options - get proper string name into variable
0-load ALL GAMES
1-first game - Team1, team2, time, score, betOptions, (nameOfOdds, odds)
2 if score is different from 0:0 OR
    time is not in interval StartTime, EndTime OR
    the betOptions (1st half score or 2nd half score) doesn't exist THEN 
    click on next game 
3 else read the (nameOfOdds, odds) value for bet option
4.if odds values are bigger then MinValOdd(1.41) AND
BetTRUE=FALSE
then  BetTRUE - output the game + minute + score + odds value into a txt file

if score is different from 0:0 AND
betOptions is == 2nd half score AND
odds values are bigger then MinValOdd AND
betTRUE ==FALSE
then  BetTRUE - output the game + minute + score + odds value into a txt file

-UPDATE GAME LIST (what is the update frequency???)
-TRY TO ADD FINAL SCORE 

ADD ramdom delays in seconds between actions (minDelay and MaxDelay)
"""
