# USER VARIABLES

# First HALF XxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXx
StartTime1 = 5 # First minute that is permited to bet on FIRST half
EndTime1 = 45  # Last minute that is permiteted to bet on FIRST half
MinValOdd1 = "1.2"  # Minimum value for the odd that is permited to bet on FIRST half

# Second HALF XxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXx
StartTime2 = 48  # First minute that is permited to bet on SECOND half
EndTime2 = 85  # Last minute that is permiteted to bet on SECOND half
MinValOdd2 = "1.2"  # Minimum value for the odd that is permited to bet on SECOND half

minDelay = 4  # Minumum time delay in seconds
MaxDelay = 10  # Maximum time delay in seconds
START_OFFSET = 225

global Debug, Debug2
Debug=False
Debug2=True

from LoadBrowser import LoadBrowser
import random, time, pyautogui, gc, datetime


# When fail-safe mode is True, moving the mouse to the upper-left will raise a pyautogui.FailSafeException that can abort your program:
pyautogui.FAILSAFE = True
a = random.uniform(minDelay, MaxDelay)  # example of Random time delay

#GLOBAL VARIAVLES
Bet_ON_List=[]




# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

def Print_to_List(File,What_to_print, win_or_loose):
    File1 = File +'_'+ str(datetime.datetime.now().strftime("%d_%m_%Y")) + '.txt'
    with open(File1, 'a') as file:
        file.write(str(What_to_print))
        file.write(str(win_or_loose))
        file.write('\n')
        file.close()




# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

def loadOddData(item1, current_i, max_i):
    """

    :param item1: 
    :param current_i: 
    :param max_i: 
    """
    if Debug==True: print("1")
    splitText = item1.text.split("\n")
    if Debug==True: print("2")
    if len(splitText) >= 4:
        if Debug==True: print("3")
        Team1 = splitText[0]
        Team2 = splitText[1]
        Score = splitText[2]
        GameTime = splitText[3]
        #if Debug==True: print(splitText[0],splitText[1],splitText[2],splitText[3])
    # only for security of not BREAKING the coce use the following : - ONLY FOR     P.R.J.
    else:
        if Debug==True: print("4")
        Team1 = "NONE"
        Team2 = "NONE"
        Score = "NONE"
        GameTime = "NONE"


    global Odd05_first_half
    global Odd05_second_half
    global OverGoals
    global Winner
    global Bet_ON
    global Bet_ON_List
    global Item_Found
    global Half

    Odd05_first_half = "NONE"
    Odd05_second_half = "NONE"
    OverGoals = "NONE"
    Winner = "NONE"
    Bet_ON = False
    Half = "NONE"

    # LOOK FOR FIRST HALF GOALS
    SEARCH_STRING1 = "First Half Goals"
    SEARCH_STRING2 = "Over"
    SEARCH_STRING3 = "Match Goals"

    # MARKET_GROUP is the full list of odds
    ListOfOdds = LoadBrowser.locateElementsByClassAndLoad("gl-MarketGroup")
    if Debug==True: print("5")

    try:
            # Search for First Half Odds
        if StartTime1 < int(GameTime[:2]) < EndTime1 and Score =="0-0":
            for i, item in enumerate(ListOfOdds):
                #if Debug==True: print(i, ": " + item.text)
                if Debug==True: print("8.1")
                if ListOfOdds == LoadBrowser.locateElementsByClassAndLoad("gl-MarketGroup") and (item.text.find(SEARCH_STRING1) != -1):
                    FHG_list = item.text.split("\n")
                    if Debug==True: print("9.1")
                    # check if Over value is a float value- error in case that odds are blocked/modified
                    if FHG_list[FHG_list.index(SEARCH_STRING2) + 1] != "Under":
                        if Debug==True: print("10.1")
                        Odd05_first_half = FHG_list[FHG_list.index(SEARCH_STRING2) + 1]
                        OverGoals = (FHG_list[1])
                        break

                # Search for Second Half Odds
        if StartTime2 < int(GameTime[:2]) < EndTime2 and Score =="0-0":
            for i, item in enumerate(ListOfOdds):
                # if Debug==True: print(i, ": " + item.text)
                if Debug==True: print("8.2")
                if ListOfOdds == LoadBrowser.locateElementsByClassAndLoad("gl-MarketGroup") and (item.text.find(SEARCH_STRING3) != -1):
                    FHG_list = item.text.split("\n")
                    if Debug==True: print("9.2")
                    # check if Over value is a float value- error in case that odds are blocked/modified
                    if FHG_list[FHG_list.index(SEARCH_STRING2) + 1] != "Under":
                        if Debug==True: print("10.2")
                        Odd05_second_half = FHG_list[FHG_list.index(SEARCH_STRING2) + 1]
                        OverGoals = (FHG_list[1])
                        break

    except ValueError:
        if Debug2==True: print("|")

    # Validate for bet_on for FIRST HALF
    if Score == "0-0" and StartTime1 < int(GameTime[:2]) < EndTime1 and OverGoals == " 0.5" and MinValOdd1 < Odd05_first_half:
        if Debug==True: print("11")
        Bet_ON = True
        Half="First"
    # Validate for bet_on for SECOND HALF
    if Score == "0-0" and StartTime2 < int(GameTime[:2]) < EndTime2 and OverGoals == " 0.5" and MinValOdd2 < Odd05_second_half:
        if Debug==True: print("12")
        Bet_ON = True
        Half="Second"

    if Odd05_second_half == "NONE":Odd05 = Odd05_first_half
    else:Odd05= Odd05_second_half

        # elif Score != "0-0" and Bet_ON==True:
        # Winner = True
    BotTime = ((time.time() - StartProgramTime) / 60)
    if Debug==True: print("13")
    # element_list with: CURRENT TIME.....RUN TIME.....TEAM 1.....TEAM 2.....SCORE.....TIME OF THE GAME.....OVER GOALS....ODD OVER.....BET ON.....Which half


    element_list = [datetime.datetime.now(),"%.2f" % BotTime, current_i, "out of", max_i, Team1, Team2, Score, GameTime, OverGoals, Odd05,
                    Bet_ON,Half]
    if Debug==True: print("14")

    #print(element_list[1:])

#Create and maintain Bet_ON_List - current games that are on bet

    if element_list[11]==True:
        if len(Bet_ON_List)==0:
            Bet_ON_List.append(list(element_list))
            Print_to_List('BET_LIST',"CURRENT TIME.....RUN TIME.....TEAM 1.....TEAM 2.....SCORE.....TIME OF THE GAME.....OVER GOALS....ODD OVER.....BET ON.....Which half", "")

        for sublist in Bet_ON_List:
            Item_Found=False
            if sublist[5] == element_list[5]:
                if Debug2 == True: print("GAME ALREADY EXISTS IN Bet_ON_List")
                Item_Found=True
                break
        if Item_Found==False:
            Bet_ON_List.append(list(element_list))
            Print_to_List('BET_ON_LIST',element_list,"")
            if Debug2 == True: print(" GAME ADDED TO LIST-----", element_list[1:])



#Verify if a game is winner - first half

    if element_list[7]!="0-0" and (int(element_list[8][:2]) < 47):
        for sublist in Bet_ON_List:
            if sublist[5] == element_list[5]:
                if Debug2 == True: print("Game WIN!-", sublist)
                Print_to_List('BET_LIST',sublist, ",WIN")
                Bet_ON_List.remove(sublist)
                break

# Verify if a game is winner - Second half
    if element_list[7] != "0-0" and (int(element_list[8][:2]) > 47):
        for sublist in Bet_ON_List:
            if sublist[5] == element_list[5] and sublist[12]=="Second":
                if Debug2 == True: print("Game WIN!-", sublist)
                Print_to_List('BET_LIST',sublist, ",WIN")
                Bet_ON_List.remove(sublist)
                break

# Verify if a game is loss -
    if element_list[7] == "0-0" and (int(element_list[8][:2]) > 47):
        for sublist in Bet_ON_List:
            if sublist[5] == element_list[5] and sublist[12]=="First":
                if Debug2 == True: print("GAME LOST- ", sublist)
                Print_to_List('BET_LIST', sublist, ",LOSS")
                Bet_ON_List.remove(sublist)
                break

    for sublist in Bet_ON_List:
        if ((datetime.datetime.now() -sublist[0]).seconds//60)>45:
            if Debug2 == True: print("GAME LOST- ", sublist)
            Print_to_List('BET_LIST',sublist, ",LOSS")
            Bet_ON_List.remove(sublist)











# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX



if __name__ == "__main__":

    LoadBrowser = LoadBrowser()


    # 1. PREPARE WEBSITE:
    # - Click through the correct links until on the correct page (Overview - Soccer)
    # missing: delay between interaction
    LoadBrowser.locateElementByTextAndClick("English")
    LoadBrowser.locateElementByTextAndClick("In-Play")
    LoadBrowser.DRIVER.find_elements_by_class_name("hm-DropDownSelections_Highlight ")[1].click()
    LoadBrowser.locateElementByTextAndClick("Decimal")

    # 2. LOGIN

    # LoadOdds.locateUsernameAndPassword("input.hm-Login_InputField", "username","password")
    # LoadOdds.locateElementByCssAndClick("button.hm-Login_LoginBtn")

    # 3. CLICK "Event View"
    LoadBrowser.locateElementByXpathAndClick("//span/div[2]")

    # 4. LOAD GAME DATA:
    # missing: score, betOptions, nameOfOdds, odds
    # teamList = LoadBrowser.locateElementsByClassAndLoad("ipn-TeamStack_Team")
    # timeList = LoadBrowser.locateElementsByClassAndLoad("ipn-ScoreDisplayStandard_Timer")
    # scoreList= LoadBrowser.locateElementsByClassAndLoad("ipn-ScoreDisplayStandard_Score")

    # pyautogui.hotkey('alt', 'space')
    # pyautogui.hotkey('x')
    pyautogui.hotkey('win', 'right')
    # used for debugging purpose
    StartProgramTime = time.time()
    itemCounter = 0



    while True:
        originalGames = LoadBrowser.locateElementsByClassAndLoad("ipn-FixtureButton ")
        if originalGames != "":
            if Debug==True: print(22)
            global Restart
            Restart=True
            while Restart==True:
                if Debug==True: print(15 + 2)
                try:
                # ASSUMPTION: LIST IS VALID Counter is not exceed and Sore lenght is 3 (as a normal football game) and lists haven't changed
                    while len(originalGames) > itemCounter + 1 and \
                                    len(originalGames[itemCounter].text.split("\n")) >= 3 and \
                                    len(originalGames[itemCounter].text.split("\n")[2]) == 3: # and\
                        #originalGames == LoadBrowser.locateElementsByClassAndLoad("ipn-FixtureButton "):
                        # MOVE TO CORRECT POSITION:
                        if Debug==True: print("16")
                        moveToX = originalGames[itemCounter].location_once_scrolled_into_view['x'] + \
                                  pyautogui.size()[0] / 2 + 100  # int(originalGames[itemCounter].size["width"]/2)
                        moveToY = originalGames[itemCounter].location_once_scrolled_into_view[
                                      'y'] + 120  # int(originalGames[itemCounter].size["height"])


                        # pyautogui.alert(text=originalGames[itemCounter].size["height"], title='', button='OK')
                        # move cursor to begining of the list
                        if itemCounter == 0: pyautogui.moveTo(moveToX, moveToY, duration=0.5)

                        # CLICK:
                        pyautogui.click(button='left')
                        if Debug==True: print("19")

                        # LOAD DATA:
                        loadOddData(originalGames[itemCounter], itemCounter, len(originalGames))
                        if Debug==True: print("20")

                        itemCounter += 1
                    try:
                        if len(originalGames[itemCounter].text.split("\n")[2]) != 3 or len(originalGames[itemCounter].text.split("\n")[3]) != 5:
                            print("While loop restarted----------------Reason: SCORE FORMAT MISSING  ")
                            itemCounter=0
                            gc.collect()  # garbage collect- clear memory
                        else:
                            print("While loop restarted----------------Reason: EQUAL LISTS")
                    except:
                        if Debug2==True: print("While loop restarted      ")
                        pass
                    break
                except:
                    if Debug2==True: print("While loop encounted some error, loop restarted")
                    pass

    else:
        if Debug2==True: print("GameList is null")
























        # XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
